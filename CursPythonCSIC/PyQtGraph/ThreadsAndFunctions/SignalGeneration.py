# -*- coding: utf-8 -*-
"""
Created on Tue Mar 17 10:09:59 2020

@author: lucia
"""

from PyQt5 import Qt

import ThreadsAndFunctions.SignalGenerationClass as SigGenClass


class GenerationThread(Qt.QThread):
    NewGenData = Qt.pyqtSignal()

    def __init__(self, SigConfig):
        '''
        Initialation of the Thread for Generation

        Parameters
        ----------
        :param SigConfig: dictionary, contains all variables related with
                          signal configuration
        SigConfig : dictionary
                    {'Fs': 2000000.0,
                     'nSamples': 20000,
                     'tInterrupt': 0.01,
                     'CarrType': 'sinusoidal',
                     'CarrFrequency': 30000.0,
                     'Phase': 0,
                     'Amplitude': 0.05,
                     'CarrNoise': 0,
                     'ModType': 'sinusoidal',
                     'ModFrequency': 1000.0,
                     'ModFactor': 0.1,
                     'ModNoise': 0
                    }

        Returns
        -------
        None.

        '''
        # super permits to initialize the classes from which this class depends
        super(GenerationThread, self).__init__()
        # The dictionary SigConfig is passed to SignalGenerator class as
        # kwargs, this means you can send the full dictionary and only use
        # the variables in which you are interesed in
        self.SigGen = SigGenClass.SignalGenerator(**SigConfig)
        # The emit signal of SigGen class is connected to a function
        self.SigGen.SignalDone.connect(self.NewData)
        #
        self.WaitLockInEnd  = False

    def run(self):
        '''
        Run function in threads is the loop that will start when thread is
        started.

        Returns
        -------
        None.

        '''
        # while True statement is used to generate a lopp in the run function
        # so, while the thread is active, the while loop is running
        while True:
            # the generation is started
            if self.WaitLockInEnd is False:
                self.WaitLockInEnd = True
                self.SigGen.StartGen()
                
            else:
                Qt.QThread.msleep(10)

    def NewData(self):
        '''
        This function Emits a signal to notify the data is ready

        Returns
        -------
        None.

        '''
        # The data generated by the SigGen class is saved as a variable of
        # the thread so it can be easly accesed by the main class
        self.OutData = self.SigGen.Signal
        self.OutNoiseData = self.SigGen.SignalNoise
        # When Data is generated an emit is done to notify it to main
        self.NewGenData.emit()
        #

